#!/usr/bin/python
# Copyright (C) 2011 Ben Jeffrey. All Rights Reserved.
import Rules
import sys

Transform = Rules.Transform

def CycleThrough (WordList):
    Derivations = []
    for Word in WordList:               # For every word in the list,
        Derivatives = Transform(Word)   # get it's transformations,
        Derivations.extend(Derivatives)      # and put them in a big list.
    return Derivations                  # Return the list for the next cycle.

def Run (MaxCycles=10, StartWord='MI', EndWord='MU'):

    Derivatives = [StartWord]   # List of words
    Cycles = 0

    while EndWord not in Derivatives:

        Cycles += 1
        print 'Cycle:', Cycles, '   Derivations:', str(len(Derivatives))
        if Cycles > MaxCycles: # Stop if we can't find it in given number of cycles.
            return 'Could not derive in %s cycles' % MaxCycles
        else:
            Derivatives.extend(CycleThrough(Derivatives))
                                            
    return (Cycles, StartWord, EndWord) # Returns a tuple at the end, if found.


if __name__ == '__main__':
    
    if len(sys.argv)<2:     #Instructions!
        InstructionsFile = open('Instructions', 'r')
        Instructions = InstructionsFile.read()
        InstructionsFile.close()
        print Instructions
        
    else:
        print Run(int(sys.argv[1]), str(sys.argv[2]), str(sys.argv[3]))
